# -*- coding: iso-8859-1-unix -*-

import os ;

project win ;

lib wsock32
  :
  : <search>c:/Windows/System32
  ;

lib rpcrt4
  :
  : <search>c:/Windows/System32
  ;

project unix ;

lib dl
  :
  : <link>shared
  ;

lib uuid
  :
  : <link>shared
  ;

lib pthread
  :
  : <link>shared
  ;

path-constant here : . ;

local lua-install-path = [ os.environ LUA_INSTALL_PATH ] ;
if ! $(lua-install-path)
{
  lua-install-path = "$(here)/../../install/lua" ;
}

project lua
  : requirements <include>$(lua-install-path)/include ;

lib lua
  : 
  : <search>$(lua-install-path)/lib
  ;

lib lua
  : 
  : <name>lua52
    <target-os>windows
    <search>$(lua-install-path)/lib
  ;

local luuid-root-path = [ os.environ LUUID_ROOT_PATH ] ;
if ! $(luuid-root-path)
{
  luuid-root-path = "$(here)/../luuid" ;
}
use-project luuid : $(luuid-root-path) ;

openssl-debug-shared-include-path = [ os.environ OPENSSL_DEBUG_SHARED_INCLUDE_PATH ] ;
if ! $(openssl-debug-shared-include-path)
{
  openssl-debug-shared-include-path = $(here)/../../install/openssl-mt-d/include ;
}

openssl-debug-shared-lib-path = [ os.environ OPENSSL_DEBUG_SHARED_LIB_PATH ] ;
if ! $(openssl-debug-shared-lib-path)
{
  openssl-debug-shared-lib-path = $(here)/../../install/openssl-mt-d/lib ;
}

openssl-debug-static-include-path = [ os.environ OPENSSL_DEBUG_STATIC_INCLUDE_PATH ] ;
if ! $(openssl-debug-static-include-path)
{
  openssl-debug-static-include-path = $(here)/../../install/openssl-mt-s-d/include ;
}

openssl-debug-static-lib-path = [ os.environ OPENSSL_DEBUG_STATIC_LIB_PATH ] ;
if ! $(openssl-debug-static-lib-path)
{
  openssl-debug-static-lib-path = $(here)/../../install/openssl-mt-s-d/lib ;
}

openssl-release-shared-include-path = [ os.environ OPENSSL_RELEASE_SHARED_INCLUDE_PATH ] ;
if ! $(openssl-release-shared-include-path)
{
  openssl-release-shared-include-path = $(here)/../../install/openssl-mt/include ;
}

openssl-release-shared-lib-path = [ os.environ OPENSSL_RELEASE_SHARED_LIB_PATH ] ;
if ! $(openssl-release-shared-lib-path)
{
  openssl-release-shared-lib-path = $(here)/../../install/openssl-mt/lib ;
}

openssl-release-static-include-path = [ os.environ OPENSSL_RELEASE_STATIC_INCLUDE_PATH ] ;
if ! $(openssl-release-static-include-path)
{
  openssl-release-static-include-path = $(here)/../../install/openssl-mt-s/include ;
}

openssl-release-static-lib-path = [ os.environ OPENSSL_RELEASE_STATIC_LIB_PATH ] ;
if ! $(openssl-release-static-lib-path)
{
  openssl-release-static-lib-path = $(here)/../../install/openssl-mt-s/lib ;
}

openssl-include-path = [ os.environ OPENSSL_INCLUDE_PATH ] ;
if $(openssl-include-path)
{
  openssl-debug-shared-include-path = $(openssl-include-path) ;
  openssl-debug-static-include-path = $(openssl-include-path) ;
  openssl-release-shared-include-path = $(openssl-include-path) ;
  openssl-release-static-include-path = $(openssl-include-path) ;
}

openssl-lib-path = [ os.environ OPENSSL_LIB_PATH ] ;
if $(openssl-lib-path)
{
  openssl-debug-shared-lib-path = $(openssl-lib-path) ;
  openssl-debug-static-lib-path = $(openssl-lib-path) ;
  openssl-release-shared-lib-path = $(openssl-lib-path) ;
  openssl-release-static-lib-path = $(openssl-lib-path) ;
}

project openssl ;

#Unix
lib crypto
  : 
  : <variant>debug
    <link>shared
    <search>$(openssl-debug-shared-lib-path)
  :
  : <include>$(openssl-debug-shared-include-path)
  ;  

lib crypto
  : 
  : <variant>debug
    <link>static
    <search>$(openssl-debug-static-lib-path)
  :
  : <include>$(openssl-debug-static-include-path)
  ;  

lib crypto
  : 
  : <variant>debug
    <link>static
    <target-os>darwin
    <file>$(openssl-debug-static-lib-path)/libcrypto.a    
  :
  : <include>$(openssl-debug-static-include-path)
  ;  

lib crypto
  : 
  : <variant>release
    <link>shared
    <search>$(openssl-release-shared-lib-path)
  :
  : <include>$(openssl-release-shared-include-path)
  ;  

lib crypto
  : 
  : <variant>release
    <link>static
    <search>$(openssl-release-static-lib-path)
  :
  : <include>$(openssl-release-static-include-path)
  ;  

lib crypto
  : 
  : <variant>release
    <link>static    
    <target-os>darwin
    <file>$(openssl-release-static-lib-path)/libcrypto.a    
  :
  : <include>$(openssl-release-static-include-path)
  ;  

#Windows
lib crypto
  : 
  : <name>libeay32
    <variant>debug
    <link>shared
    <target-os>windows
    <search>$(openssl-debug-shared-lib-path)
  :
  : <linkflags>"gdi32.lib user32.lib advapi32.lib"
    <include>$(openssl-debug-shared-include-path)
  ;  

lib crypto
  : 
  : <name>libeay32
    <variant>debug
    <link>static
    <target-os>windows
    <search>$(openssl-debug-static-lib-path)
  :
  : <linkflags>"gdi32.lib user32.lib advapi32.lib"
    <include>$(openssl-debug-static-include-path)
  ;  

lib crypto
  : 
  : <name>libeay32
    <variant>release
    <link>shared
    <target-os>windows
    <search>$(openssl-release-shared-lib-path)
  :
  : <linkflags>"gdi32.lib user32.lib advapi32.lib"
    <include>$(openssl-release-shared-include-path)
  ;  

lib crypto
  : 
  : <name>libeay32
    <variant>release
    <link>static
    <target-os>windows
    <search>$(openssl-release-static-lib-path)
  :
  : <linkflags>"gdi32.lib user32.lib advapi32.lib"
    <include>$(openssl-release-static-include-path)
  ;  

#Unix
lib openssl
  : crypto
  : <name>ssl 
    <variant>debug
    <link>shared
    <search>$(openssl-debug-shared-lib-path)
  :
  : <include>$(openssl-debug-shared-include-path)
  ;  

lib openssl
  : crypto
  : <name>ssl 
    <variant>debug
    <link>static
    <search>$(openssl-debug-static-lib-path)
    <target-os>darwin:<file>$(openssl-debug-static-lib-path)/libssl.a    
  :
  : <include>$(openssl-debug-static-include-path)
  ;  

lib openssl
  : crypto
  : <name>ssl 
    <variant>debug
    <link>static
    <target-os>darwin
    <file>$(openssl-debug-static-lib-path)/libssl.a    
  :
  : <include>$(openssl-debug-static-include-path)
  ;  

lib openssl
  : crypto
  : <name>ssl 
    <variant>release
    <link>shared
    <search>$(openssl-release-shared-lib-path)
  :
  : <include>$(openssl-release-shared-include-path)
  ;  

lib openssl
  : crypto
  : <name>ssl 
    <variant>release
    <link>static
    <search>$(openssl-release-static-lib-path)
  :
  : <include>$(openssl-release-static-include-path)
  ;  

lib openssl
  : crypto
  : <name>ssl 
    <variant>release
    <link>static
    <target-os>darwin
    <file>$(openssl-release-static-lib-path)/libssl.a    
  :
  : <include>$(openssl-release-static-include-path)
  ;  

#Windows
lib openssl
  : crypto
  : <name>ssleay32 
    <variant>debug
    <link>shared
    <target-os>windows
    <search>$(openssl-debug-shared-lib-path)
  :
  : <include>$(openssl-debug-shared-include-path)
  ;  

lib openssl
  : crypto
  : <name>ssleay32 
    <variant>debug
    <link>static
    <target-os>windows
    <search>$(openssl-debug-static-lib-path)
  :
  : <include>$(openssl-debug-static-include-path)
  ;  

lib openssl
  : crypto
  : <name>ssleay32 
    <variant>release
    <link>shared
    <target-os>windows
    <search>$(openssl-release-shared-lib-path)
  :
  : <include>$(openssl-release-shared-include-path)
  ;  

lib openssl
  : crypto
  : <name>ssleay32 
    <variant>release
    <link>static
    <target-os>windows
    <search>$(openssl-release-static-lib-path)
  :
  : <include>$(openssl-release-static-include-path)p
  ;  

local lce-root-path = [ os.environ LCE_ROOT_PATH ] ;
if ! $(lce-root-path)
{
  lce-root-path = "$(here)/../lce" ;
}
use-project lce : $(lce-root-path) ;

local lfs-root-path = [ os.environ LFS_ROOT_PATH ] ;
if ! $(lfs-root-path)
{
  lfs-root-path = "$(here)/../luafilesystem" ;
}
use-project lfs : $(lfs-root-path) ;

local luavararg-root-path = [ os.environ LUAVARARG_ROOT_PATH ] ;
if ! $(luavararg-root-path)
{
  luavararg-root-path = "$(here)/../luavararg" ;
}
use-project luavararg : $(luavararg-root-path) ;

local luastruct-root-path = [ os.environ LUASTRUCT_ROOT_PATH ] ;
if ! $(luastruct-root-path)
{
  luastruct-root-path = "$(here)/../luastruct" ;
}
use-project luastruct : $(luastruct-root-path) ;

local luasocket-root-path = [ os.environ LUASOCKET_ROOT_PATH ] ;
if ! $(luasocket-root-path)
{
  luasocket-root-path = "$(here)/../luasocket" ;
}
use-project luasocket : $(luasocket-root-path) ;

local loop-root-path = [ os.environ LOOP_ROOT_PATH ] ;
if ! $(loop-root-path)
{
  loop-root-path = "$(here)/../loop" ;
}
use-project loop : $(loop-root-path) ;

local oil-root-path = [ os.environ OIL_ROOT_PATH ] ;
if ! $(oil-root-path)
{
  oil-root-path = "$(here)/../oil" ;
}
use-project oil : $(oil-root-path) ;

local luascs-root-path = [ os.environ LUASCS_ROOT_PATH ] ;
if ! $(luascs-root-path)
{
  luascs-root-path = "$(here)/../scs-lua" ;
}
use-project luascs : $(luascs-root-path) ;
